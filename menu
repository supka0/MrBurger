import tkinter as tk
from tkinter import messagebox

Basket = []
list_menu = ["Гамбургер", "Чизбургер", "Картофель фри", "Кока-кола", "Шейк"]
prices = [150, 120, 80, 100, 250]
ingredients = {
    "Гамбургер": ["Котлета", "Помидор", "Лук", "Соус", "Соленые огурчики"],
    "Чизбургер": ["Котлета", "Сыр", "Помидор", "Лук", "Соус", "Соленые огурчики"],
    "Картофель фри": ["Картофель", "Масло"],
    "Кока-кола": ["Вода", "Сахар", "Углекислота", "Краситель"],
    "Шейк": ["Молоко", "Мороженое", "Сироп"]
}

def total_price():
    total_price = 0
    for item, price in zip(list_menu, prices):
        total_price += Basket.count(item) * price
    return total_price

def go_to_order(parent):
    parent.title("Меню заказа")
    for widget in parent.winfo_children():
        widget.destroy()

    order_label = tk.Label(parent, text="Выберите товар, который желаете заказать:")
    order_label.pack()

    cart_frame = tk.Frame(parent)
    cart_frame.pack()

    cart_label = tk.Label(cart_frame, text="Корзина:")
    cart_label.pack()

    cart_items = []
    for i, item in enumerate(list_menu):
        item_count = Basket.count(item)
        item_frame = tk.Frame(cart_frame)
        item_frame.pack()
        item_label = tk.Label(item_frame, text=f"{i+1} - {item} ({prices[i]} рублей)")
        item_label.pack(side=tk.LEFT)
        decrease_button = tk.Button(item_frame, text="-", command=lambda x=item: remove_from_basket(x, parent))
        decrease_button.pack(side=tk.LEFT)
        increase_button = tk.Button(item_frame, text="+", command=lambda x=item: add_to_basket(x, parent))
        increase_button.pack(side=tk.LEFT)
        item_count_label = tk.Label(item_frame, text=f"Количество: {item_count}")
        item_count_label.pack(side=tk.LEFT)

    total_price_label = tk.Label(cart_frame, text=f"Общая сумма: {total_price()} рублей")
    total_price_label.pack()

    payment_button = tk.Button(parent, text="Оплата", command=lambda: payment(parent))
    payment_button.pack()

    back_button = tk.Button(parent, text="Выход", command=parent.quit)
    back_button.pack()

def add_to_basket(item, parent):
    Basket.append(item)
    messagebox.showinfo("Корзина", f"{item} добавлен в корзину!")
    go_to_order(parent)

def remove_from_basket(item, parent):
    if item in Basket:
        Basket.remove(item)
        messagebox.showinfo("Корзина", f"{item} удален из корзины!")
    else:
        messagebox.showerror("Ошибка", f"{item} не находится в корзине.")
    go_to_order(parent)

def payment(parent):
    parent.title("Окно оплаты")
    for widget in parent.winfo_children():
        widget.destroy()

    total_price_value = total_price()
    payment_label = tk.Label(parent, text=f"Вы купили товаров на сумму: {total_price_value} рублей")
    payment_label.pack()

    payment_method_label = tk.Label(parent, text="Выберите способ оплаты:")
    payment_method_label.pack()

    card_button = tk.Button(parent, text="По карте", command=lambda: pay_by_card(parent))
    card_button.pack()

    cash_button = tk.Button(parent, text="Наличными", command=lambda: pay_cash(parent))
    cash_button.pack()

    back_button = tk.Button(parent, text="Назад", command=lambda: go_to_order(parent))
    back_button.pack()

def pay_by_card(parent):
    parent.title("Оплата картой")
    for widget in parent.winfo_children():
        widget.destroy()

    card_label = tk.Label(parent, text="Введите данные карты:")
    card_label.pack()

    card_number_label = tk.Label(parent, text="Номер карты:")

    card_number_label.pack()
    card_number_entry = tk.Entry(parent)
    card_number_entry.pack()

    expiry_date_label = tk.Label(parent, text="Срок действия (ММ/ГГ):")
    expiry_date_label.pack()
    expiry_date_entry = tk.Entry(parent)
    expiry_date_entry.pack()

    cvv_label = tk.Label(parent, text="CVV:")
    cvv_label.pack()
    cvv_entry = tk.Entry(parent, show="*")
    cvv_entry.pack()

    pay_button = tk.Button(parent, text="Оплатить",
                           command=lambda: process_card_payment(card_number_entry.get(), expiry_date_entry.get(),
                                                                cvv_entry.get()))
    pay_button.pack()

    back_button = tk.Button(parent, text="Назад", command=lambda: payment(parent))
    back_button.pack()


def process_card_payment(card_number, expiry_date, cvv):
    messagebox.showinfo("Оплата", "Спасибо за покупку!")
    Basket.clear()


def pay_cash(parent):
    parent.title("Оплата наличными")
    for widget in parent.winfo_children():
        widget.destroy()

    total_price_value = total_price()
    cash_amount = tk.IntVar()
    cash_label = tk.Label(parent, text=f"Введите сумму оплаты наличными (Итого: {total_price_value} рублей):")
    cash_label.pack()
    cash_entry = tk.Entry(parent, textvariable=cash_amount)
    cash_entry.pack()
    pay_button = tk.Button(parent, text="Оплатить", command=lambda: process_cash_payment(cash_amount.get()))
    pay_button.pack()
    back_button = tk.Button(parent, text="Назад", command=lambda: payment(parent))
    back_button.pack()


def process_cash_payment(cash_amount):
    total_price_value = total_price()
    if cash_amount > total_price_value:
        change = cash_amount - total_price_value
        messagebox.showinfo("Оплата", f"Спасибо за покупку! Вот ваша сдача: {change} рублей.")
        Basket.clear()
    elif cash_amount == total_price_value:
        messagebox.showinfo("Оплата", "Спасибо за покупку!")
        Basket.clear()
    else:
        messagebox.showerror("Ошибка", "Вы дали недостаточную сумму для оплаты заказа.")


root = tk.Tk()
root.title("Ресторан")
go_to_order(root)
root.mainloop()
