import json
from collections import namedtuple
import itertools

with open('menu.json', 'r', encoding='utf-8') as file:
    data = json.load(file)

MenuItem = namedtuple('MenuItem', 'name price')
Ingredient = namedtuple('Ingredient', 'name price')

menu_items = []
for item in data['menu_items']:
    name = item['name']
    price = item.get('price')
    menu_items.append(MenuItem(name, price))

burger_ingredients = [Ingredient(item['name'], item['price']) for item in data['burger_ingredients']]
double_burger_ingredients = [Ingredient(item['name'], item['price']) for item in data['double_burger_ingredients']]
cheeseburger_ingredients = [Ingredient(item['name'], item['price']) for item in data['cheeseburger_ingredients']]
double_cheeseburger_ingredients = [Ingredient(item['name'], item['price']) for item in data['double_cheeseburger_ingredients']]
crabsburger_ingredients = [Ingredient(item['name'], item['price']) for item in data['crabsburger_ingredients']]
shake_ingredients = [Ingredient(item['name'], item['price']) for item in data['shake_ingredients']]
shake_flavors = data['shake_flavors']
sauces = data['sauces']
sizes = data['sizes']

basket = []

def add_to_basket(item_name, customizations=None, cost=None):
    if cost is None:
        item_price = get_item_price(item_name)
        customization_cost = get_customization_cost(customizations)
        cost = customization_cost + (item_price if item_price is not None else 0)
    basket.append((item_name, customizations, cost))

def get_item_price(item_name):
    item = next((item for item in menu_items if item.name == item_name), None)
    return item.price if item is not None else 0

def get_customization_cost(customizations):
    cost = 0
    if customizations:
        ingredients, size, sauces, flavor = customizations
        cost += sum(ingr.price for ingr in ingredients)
        cost += sizes.get(size, 0)
        cost += sum(20 if sauce else 0 for sauce in sauces)
        cost += 20 if flavor and flavor != 'Классический' else 0
    return cost


def customize_item(item_name):
    ingredients = get_ingredients(item_name)
    size = None
    sauces = []
    flavor = None

    if ingredients:
        selected_ingredients = select_ingredients(ingredients)
    else:
        selected_ingredients = []

    if item_name in ['Картофель фри', 'Кока-кола', 'Фанта', 'Спрайт', 'Крылышки', 'Ножки', 'Нагетсы', 'Соус']:
        sauces = select_sauces(item_name)

    if item_name in ['Картофель фри', 'Кока-кола', 'Фанта', 'Спрайт', 'Крылышки', 'Ножки', 'Нагетсы']:
        size = select_size(item_name)

    if item_name == 'Шейк':
        flavor = select_shake_flavor(item_name)

    customizations = (selected_ingredients, size, sauces, flavor)
    add_to_basket(item_name, customizations)

def get_ingredients(item_name):
    if item_name == 'Гамбургер':
        return burger_ingredients
    elif item_name == 'Двойной Гамбургер':
        return double_burger_ingredients
    elif item_name == 'Чизбургер':
        return cheeseburger_ingredients
    elif item_name == 'Двойной Чизбургер':
        return double_cheeseburger_ingredients
    elif item_name == 'Крабсбургер':
        return crabsburger_ingredients
    elif item_name == 'Шейк':
        return shake_ingredients
    return []

def select_ingredients(ingredients):
    print('Выберите ингредиенты (введите номера через запятую):')
    for i, ingredient in enumerate(ingredients, 1):
        print(f'{i}. {ingredient.name} ({ingredient.price} руб.)')
    selected = input('Введите номера ингредиентов (или нажмите Enter, чтобы пропустить): ') or ''
    selected_ingredients = [ingredients[int(i)-1] for i in selected.split(',') if i.isdigit()]
    ingredient_costs = [f'{ingr.name} ({ingr.price} руб.)' for ingr in selected_ingredients]
    print(f'Выбранные ингредиенты: {", ".join(ingredient_costs)}')
    print(f'Стоимость добавочных ингредиентов: {sum(ingr.price for ingr in selected_ingredients)} руб.')
    return selected_ingredients

def select_size(item_name):
    print('Выберите размер порции:')
    for i, (size, price) in enumerate(sizes.items(), 1):
        print(f'{i}. {size} ({price} руб.)')
    choice = input('Введите номер размера: ')
    if choice.isdigit():
        selected_size = list(sizes.keys())[int(choice)-1]
    else:
        selected_size = 'Средний'
    print(f'Выбранный размер: {selected_size} ({sizes[selected_size]} руб.)')
    return selected_size

def select_sauces(item_name):
    print(f'Выберите соусы для {item_name} (введите номера через запятую, или нажмите Enter для пропуска):')
    for i, sauce in enumerate(sauces, 1):
        print(f'{i}. {sauce}')
    choices = input('Выбранные соусы: ')
    selected_sauces = []

    if choices:
        for choice in choices.split(','):
            if choice.isdigit() and 1 <= int(choice) <= len(sauces):
                selected_sauces.append(sauces[int(choice) - 1])
            else:
                print(f'Неверный выбор: {choice}')

    return selected_sauces


def select_shake_flavor(item_name):
    print('Выберите вкус шейка:')
    for i, flavor in enumerate(shake_flavors, 1):
        print(f'{i}. {flavor} ({20 if flavor != "Классический" else 0} руб.)')
    choice = input('Введите номер вкуса: ')
    if choice.isdigit():
        selected_flavor = shake_flavors[int(choice)-1]
    else:
        selected_flavor = None
    if selected_flavor:
        print(f'Выбранный вкус: {selected_flavor} ({20 if selected_flavor != "Классический" else 0} руб.)')
    return selected_flavor



def print_basket():
    total_cost = 0
    print('Корзина:')
    for item_name, customizations, item_cost in basket:
        if item_name.startswith('Комбо:'):
            print(f'- {item_name} ({item_cost} руб.)')
            total_cost += item_cost
        else:
            item_price = get_item_price(item_name)
            print(f'- {item_name} ({item_price} руб.)')
            total_cost += item_price
            if customizations:
                ingredients, size, sauces, flavor = customizations
                if ingredients:
                    print('   Ингредиенты:', ', '.join(f'{ingr.name} ({ingr.price} руб.)' for ingr in ingredients))
                    total_cost += sum(ingr.price for ingr in ingredients)
                if size:
                    size_price = sizes.get(size, 0)
                    print(f'   Размер: {size} ({size_price} руб.)')
                    total_cost += size_price
                if sauces:
                    sauce_costs = [f'{sauce}' for sauce in sauces]
                    sauce_count = len(sauces)
                    print(f'   Соусы: {", ".join(sauce_costs)}')
                    total_cost += sauce_count * 20 - 20
                if flavor:
                    flavor_price = 20 if flavor != "Классический" else 0
                    print(f'   Вкус: {flavor} ({flavor_price} руб.)')
                    total_cost += flavor_price
    print(f'Итоговая стоимость: {total_cost} руб.')




def process_payment(discount):
    total_cost = sum(item_cost + get_customization_cost(customizations) for _, customizations, item_cost in basket)
    combo_cost = sum(item_cost for item_name, customizations, item_cost in basket if item_name == "Комбо")
    total_cost += combo_cost

    discounted_cost = int(total_cost * (1 - discount / 100) + 0.99) if discount else total_cost

    payment = int(input('Введите сумму для оплаты: '))

    if payment >= discounted_cost:
        change = payment - discounted_cost
        print(f'Спасибо за покупку! Ваша сдача: {change} руб.')
        basket.clear()
    else:
        print('Недостаточно средств для оплаты.')



def generate_combos(burgers, drinks, snacks, preferences=None):
    all_burgers = [item.name for item in menu_items if item.name in burgers]
    all_drinks = [item.name for item in menu_items if item.name in drinks]
    all_snacks = [item.name for item in menu_items if item.name in snacks]

    if preferences:
        preferred_burgers = [burger for burger in preferences if burger in burgers]
        preferred_drinks = [drink for drink in preferences if drink in drinks]
        preferred_snacks = [snack for snack in preferences if snack in snacks]
    else:
        preferred_burgers, preferred_drinks, preferred_snacks = [], [], []

    combos = []

    for burger_combo in itertools.product(preferred_burgers or all_burgers, repeat=max_burgers):
        for drink_combo in itertools.product(preferred_drinks or all_drinks, repeat=max_drinks):
            for snack_combo in itertools.product(preferred_snacks or all_snacks, repeat=max_snacks):
                combo = list(burger_combo) + list(drink_combo) + list(snack_combo)
                combo_cost = sum(get_item_price(item) for item in combo)
                discounted_cost = int(combo_cost * 0.8 + 0.99)
                combos.append((combo, discounted_cost))

    combos.sort(key=lambda x: x[1])
    return combos


def select_combo():
    global max_burgers, max_drinks, max_snacks

    burgers = ['Гамбургер', 'Чизбургер', 'Двойной Гамбургер', 'Двойной Чизбургер', 'Крабсбургер']
    drinks = ['Кока-кола', 'Фанта', 'Спрайт', 'Шейк']
    snacks = ['Крылышки', 'Ножки', 'Наггетсы']

    max_burgers = int(input('Введите максимальное количество бургеров (не больше 3): ') or 0)
    max_drinks = int(input('Введите максимальное количество напитков (не больше 3): ') or 0)
    max_snacks = int(input('Введите максимальное количество закусок (не больше 3): ') or 0)

    if max_burgers > 3 or max_drinks > 3 or max_snacks > 3:
        print('Максимальное количество элементов в каждой категории не должно превышать 3.')
        return

    preferences = input('Введите предпочтения через запятую (или нажмите Enter для пропуска): ').split(',')
    preferences = [pref.strip() for pref in preferences]

    combos = generate_combos(burgers, drinks, snacks, preferences)

    if not combos:
        print('Не удалось сгенерировать комбинации.')
        return

    print('Комбо:')
    for i, (combo, cost) in enumerate(combos, 1):
        print(f'{i}. {", ".join(combo)} ({cost} руб.)')

    choice = input('Введите номера комбо через запятую (или 0 для возврата в меню): ')
    if choice == '0':
        return

    selected_combos = []
    for idx in choice.split(','):
        if idx.isdigit() and 1 <= int(idx) <= len(combos):
            selected_combos.append(combos[int(idx) - 1])

    for combo, cost in selected_combos:
        add_to_basket(f'Комбо: {", ".join(combo)}', cost=cost)



def main():
    while True:
        print('Меню:')
        for i, item in enumerate(menu_items, 1):
            if item.price is None:
                print(f'{i}. {item.name}')
            else:
                print(f'{i}. {item.name} ({item.price}) руб.')
        print('0. Просмотр корзины')
        print('c. Создать комбо')
        print('q. Выход')

        choice = input('Введите номер пункта меню: ').lower()
        if choice == 'q':
            break
        elif choice == '0':
            print_basket()
            process_payment(0)
        elif choice == 'c':
            select_combo()
        elif choice.isdigit() and 1 <= int(choice) <= len(menu_items):
            item_name = menu_items[int(choice)-1].name
            customize_item(item_name)
        else:
            print('Неверный выбор. Попробуйте снова.')

if __name__ == '__main__':
    main()
