import json
import string
import random
import os

def generate_unique_id():
    while True:
        new_id = ''.join(random.choices(string.digits, k=3)) + ''.join(random.choices(string.ascii_letters, k=3))
        if new_id not in [worker['id'] for worker in workers]:
            return new_id

def process_applications():
    for application in applications[:]:
        print(json.dumps(application, indent=2, ensure_ascii=False))
        response = input("Принять или отклонить (принять/отклонить)? ").lower()
        if response == "отклонить":
            applications.remove(application)
            save_applications()
        elif response == "принять":
            applications.remove(application)
            save_applications()
            new_worker = {
                "id": generate_unique_id(),
                "title": "Младший кассир",
                "application": application
            }
            workers.append(new_worker)
            save_workers()
        else:
            print("Неверный ввод, пожалуйста, попробуйте снова.")

def manage_workers():
    choice = input("Уволить работника или повысить (уволить/повысить)? ").lower()
    if choice == "уволить":
        worker_id = input("Введите ID работника для увольнения: ")
        for worker in workers:
            if worker['id'] == worker_id:
                workers.remove(worker)
                save_workers()
                print(f"Работник с ID {worker_id} уволен.")
                break
        else:
            print(f"Работник с ID {worker_id} не найден.")
    elif choice == "повысить":
        promote_worker()
    else:
        print("Неверный ввод, пожалуйста, попробуйте снова.")

def promote_worker():
    worker_id = input("Введите ID работника для повышения: ")
    for worker in workers:
        if worker['id'] == worker_id:
            if worker['title'] == "Младший кассир":
                worker['title'] = "Старший кассир"
                save_workers()
                print(f"Работник с ID {worker_id} повышен до Старшего кассира.")
            elif worker['title'] == "Старший кассир":
                worker['title'] = "Менеджер"
                save_workers()
                print(f"Работник с ID {worker_id} повышен до Менеджера.")
            else:
                print(f"Работник с ID {worker_id} уже является Менеджером, дальнейшее повышение невозможно.")
            break
    else:
        print(f"Работник с ID {worker_id} не найден.")

def add_menu_item():
    name = input("Введите название блюда: ")
    price = input("Введите цену блюда: ")
    new_item = {"name": name, "price": int(price)}
    menu_data["menu_items"].append(new_item)
    save_menu_data()

def save_workers():
    with open("workers.json", "w", encoding="utf-8") as file:
        json.dump(workers, file, indent=2, ensure_ascii=False)

def save_applications():
    with open("applications.json", "w", encoding="utf-8") as file:
        json.dump(applications, file, indent=2, ensure_ascii=False)

def save_menu_data():
    with open("menu.json", "w", encoding="utf-8") as file:
        json.dump(menu_data, file, indent=2, ensure_ascii=False)


workers_file = "workers.json"
menu_file = "menu.json"
applications_file = "applications.json"

if not os.path.exists(workers_file):
    with open(workers_file, "w", encoding="utf-8") as file:
        json.dump([], file)

if not os.path.exists(applications_file):
    with open(applications_file, "w", encoding="utf-8") as file:
        json.dump([], file)

with open(applications_file, "r", encoding="utf-8") as file:
    applications = json.load(file)

with open(workers_file, "r", encoding="utf-8") as file:
    workers = json.load(file)

with open(menu_file, "r", encoding="utf-8") as file:
    menu_data = json.load(file)


process_applications()


while True:
    choice = input("1. Уволить или повысить работника\n2. Добавить блюдо в меню\n3. Выйти\nВыберите опцию: ")
    if choice == "1":
        manage_workers()
    elif choice == "2":
        add_menu_item()
    elif choice == "3":
        break
    else:
        print("Неверный выбор, пожалуйста, попробуйте снова.")
